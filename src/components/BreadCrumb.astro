---
import { getColleges, getCourses } from "#lib/helper.ts";
import BreadCrumbArrow from "./BreadCrumbArrow.astro";

const { pathname } = Astro.url;

const isUniversitiesHome = pathname.match(/\/open-labs\/universities\/?$/);
const isCollegePage = pathname.match(/\/open-labs\/universities\/[^\/]+\/?$/);
const isCoursesPage = pathname.match(/\/open-labs\/courses\/[^\/]+\/?$/);
const isSubjectsPage = pathname.match(/\/open-labs\/subjects\/[^\/]+\/?$/);

const colleges = await getColleges();
const courses = await getCourses();

console.log("Current path:", pathname);
console.log("Courses data:", courses);

const breadcrumbs = [];

breadcrumbs.push({
  title: "University",
  href: "/open-labs/universities",
  active: isUniversitiesHome,
});

function getData(title: string) {
  if (title === 'college') {
    const college = courses[0].taught_at[0];
    const uni = colleges.find((affiliate) => affiliate.id == college)?.affiliated_to;
    return uni;
  } else if (title === 'course') {
    console.log("Getting course data...");
    
    const pathSegments = pathname.split('/').filter(segment => segment.length > 0);
    console.log("Path segments:", pathSegments);
    
    const subjectsIndex = pathSegments.findIndex(segment => segment === 'subjects');
    const collegeCoursePart = subjectsIndex !== -1 && subjectsIndex + 1 < pathSegments.length 
      ? pathSegments[subjectsIndex + 1] 
      : pathSegments[pathSegments.length - 1];
    
    console.log("College-course part from URL:", collegeCoursePart);
    console.log("Available courses:", courses);
    
    const matchingCourse = courses.find(course => {
      const collegeNames = course.taught_at;
      console.log(`Checking course: ${course.name}, taught_at: ${collegeNames}`);
      
      return collegeNames.some(college => {
        const expectedPattern = `${college}-${course.name}`;
        console.log(`Comparing: ${collegeCoursePart} === ${expectedPattern}`);
        return collegeCoursePart === expectedPattern;
      });
    });
    
    console.log("Matching course found:", matchingCourse);
    
    if (matchingCourse) {
      const courseName = matchingCourse.name;
      const collegeName = collegeCoursePart.replace(`-${courseName}`, '');
      console.log("Extracted college name:", collegeName);
      return collegeName;
    }
    
    console.log("No matching course found, returning null");
  }
  return null;
}

if (isCollegePage || isCoursesPage || isSubjectsPage) {
  let uniHref = '#'; // default fallback
  if (isCoursesPage || isSubjectsPage) {
    const uni = getData('college');
    if (uni) {
      uniHref = `/open-labs/universities/${uni}`;
    }
  }
  
  breadcrumbs.push({
    title: "College",
    href: uniHref,
    active: isCollegePage,
  });
  
  let courseHref = '#';
  let course = getData('course');
  console.log("Course result:", course);
  
  if (course) {
    courseHref = `/open-labs/courses/${course}`;
    console.log("Course href set to:", courseHref);
  } else {
    console.log("Course is null, href remains #");
  }
  
  if (isSubjectsPage || isCoursesPage) {
    breadcrumbs.push({
      title: "Courses",
      href: courseHref,
      active: isCoursesPage,
    });
  }
}

if (isSubjectsPage) {
  breadcrumbs.push({
    title: "Subjects",
    active: true,
  });
}

console.log("Final breadcrumbs:", breadcrumbs);
---

<nav class="flex">
  <ol
    class="inline-flex items-center space-x-1 md:space-x-2 rtl:space-x-reverse"
  >
    {
      breadcrumbs.map((crumb, i) => (
        <li class="inline-flex items-center gap-3">
          <a
            href={crumb.href}
            class={`inline-flex text-sm font-medium ${crumb.active ? "text-black hover:text-blue-800" : "text-[#71717A]"}`}
          >
            <span class={`ms-1 text-sm font-medium md:ms-2`}>
              {crumb.title}
            </span>
          </a>
          {i < breadcrumbs.length - 1 && <BreadCrumbArrow />}
        </li>
      ))
    }
  </ol>
</nav>