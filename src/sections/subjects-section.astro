---
import BreadCrumb from "#components/BreadCrumb.astro";
import Button from "#components/Button.astro";
import SearchBar from "#components/SearchBar.astro";
import FilterIcon from "#assets/icons/filter.svg";
import SubjectCard from "#components/SubjectCard.astro";
import { getSubjects, getColleges, getCollegeByName } from "#lib/helper.ts";
import Footer from "#components/Footer.astro";
import Pagination from "#components/Pagination.astro";

interface Subject {
  name: string;
  taught_at: string[];
  courses: string[];
  semesters: number[];
}

const { college, course } = Astro.props;

const subjects = await getSubjects();
const colleges = await getColleges();
const selectedCollege = colleges.find((c) => c.id === college);
const selectedSubjects = subjects.filter(
  (subject) =>
    subject.taught_at.includes(college) && subject.courses.includes(course),
);

// Serialize the subjects data for client-side use
const serializedSubjects = JSON.stringify(selectedSubjects);

---

<div
  class="px-5 md:px-10 lg:px-15 py-5 flex flex-col lg:flex-row gap-5 lg:gap-40 mt-10 lg:justify-between w-full min-h-[90dvh]"
>
  <div class="flex flex-col gap-5 lg:w-[35%] justify-between">
    <div class="flex flex-col gap-5">
      <BreadCrumb />
      <h1
        class="font-[600] text-2xl md:text-3xl text-indigo-950 lg:text-4xl mt-10"
      >
        Subjects available in
        <span class="underline">
          {course.charAt(0).toUpperCase() + course.slice(1)}
        </span>
      </h1>

      <div class="flex gap-3 flex-col md:flex-row">
        <SearchBar entity="subjects" />
        <Button
          id="search-button"
          variant="primary"
          type="button"
          text="Search"
          className="px-8 text-sm lg:text-md"
        />
      </div>
      <div class="flex gap-2 mt-2 md:mt-5 flex-col items-start">
        <div>
          <span class="flex justify-start gap-2 items-center">
            <FilterIcon />
            <p class="font-semibold">Filter</p>
          </span>
        </div>
        <select
          id="semester-filter"
          class="p-3 w-full sm:w-fit border border-gray-300 text-gray-600 text-base rounded-lg focus:outline-none"
        >
          <option value="" selected>All Semesters</option>
          <option value="1">1st Semester</option>
          <option value="2">2nd Semester</option>
          <option value="3">3rd Semester</option>
          <option value="4">4th Semester</option>
          <option value="5">5th Semester</option>
          <option value="6">6th Semester</option>
          <option value="7">7th Semester</option>
          <option value="8">8th Semester</option>
        </select>
      </div>
    </div>

    <div class="hidden lg:block mt-auto">
      <Footer />
    </div>
  </div>

  <div class="flex flex-col justify-between w-full lg:w-2/3">
    <div class="flex-1 grid grid-cols-1 gap-6 mt-4" id="subject-container">
      <SubjectCard
        subjects={selectedSubjects}
        university_id={selectedCollege?.affiliated_to}
        course={course}
      />
    </div>
    <div class="hidden lg:block mt-auto">
      <Pagination />
    </div>
  </div>
  <div class="block lg:hidden mt-auto">
    <Pagination />
    <Footer />
  </div>
</div>

<script>
  import { initSubjectSearch } from "#lib/searchSubjects.ts";
  initSubjectSearch();

  // Parse the serialized subjects data
  const subjectsData = JSON.parse('{serializedSubjects}');

  document.addEventListener("DOMContentLoaded", () => {
    const semesterFilter = document.getElementById("semester-filter") as HTMLSelectElement;
    const subjectCards = document.querySelectorAll(".subject-card > div > div");

    function filterBySemester() {
      const selectedSemester = semesterFilter?.value;
      
      subjectCards.forEach((card) => {
        const subjectName = card.querySelector(".subject-name")?.textContent;
        const subject = subjectsData.find((s: any) => s.name === subjectName);
        
        if (!selectedSemester || (subject && subject.semesters.includes(Number(selectedSemester)))) {
          card.classList.remove("hidden");
        } else {
          card.classList.add("hidden");
        }
      });
    }

    semesterFilter?.addEventListener("change", filterBySemester);
  });
</script>
